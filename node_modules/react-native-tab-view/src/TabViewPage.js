/* @flow */

import React, { Component, PropTypes } from 'react';
import {
 Animated,
 PanResponder,
 StyleSheet,
 View,
 AlertIOS,
 Dimensions,
} from 'react-native';
import shallowCompare from 'react-addons-shallow-compare';
import TabViewPanResponder from './TabViewPanResponder';
import TabViewStyleInterpolator from './TabViewStyleInterpolator';
import { SceneRendererPropType } from './TabViewPropTypes';
import type { Route, Scene, SceneRendererProps } from './TabViewTypeDefinitions';
var deviceheight = Dimensions.get('window').height;
 var iphone5 = 568;
 var iphone5s = 568;
 var iphone6 = 667;
 var iphone6s = 667;
 var iphone7 = 667;
 var iphone6Plus = 736;
 var iphone6SPlus = 736;
 var iphone7Plus = 736;

const styles = StyleSheet.create({

 page: {
   position: 'absolute',
 },
});

type Props = SceneRendererProps & {
 route: Route;
 renderScene: (scene: Scene) => ?React.Element<any>;
 panHandlers?: any;
 style?: any;
}

export default class TabViewPage extends Component<void, Props, void> {
 static propTypes = {
   ...SceneRendererPropType,
   renderScene: PropTypes.func.isRequired,
   panHandlers: PropTypes.object,
   style: PropTypes.any,
 };
 constructor(props) {
   super(props);
 
     this.state = {
     
     };
     }
   

   changeComponenttop(){}

 componentDidMount() {

   // AlertIOS.alert('somedata',JSON.stringify(Dimensions.get('window').height));
   if (deviceheight === iphone6) {
     this.setState({
       screentop:-(Dimensions.get('window').height/2)+45,
     })
   }else if (Dimensions.get('window').height === iphone5){
     this.setState({
       screentop:-(Dimensions.get('window').height/2)+40,
     })
   }
   else if (Dimensions.get('window').height === iphone6SPlus){
     this.setState({
       screentop:-(Dimensions.get('window').height/2)+60,
     })
   }
   else if (Dimensions.get('window').height < iphone5){
     this.setState({
       screentop:-(Dimensions.get('window').height/2)+45,
     })
   }
    // AlertIOS.alert('somedata3',JSON.stringify(this.state.screentop));
 }
 static PanResponder = TabViewPanResponder;
 static StyleInterpolator = TabViewStyleInterpolator;

 shouldComponentUpdate(nextProps: Props, nextState: void) {
   return shallowCompare(this, nextProps, nextState);
 }

 render() {
   const { renderScene, panHandlers, style, route } = this.props;
   const { routes, index } = this.props.navigationState;

   const viewPanHandlers = typeof panHandlers !== 'undefined' ? panHandlers : TabViewPanResponder.forHorizontal(this.props);
   const viewStyle = typeof style !== 'undefined' ? style : TabViewStyleInterpolator.forHorizontal(this.props);
   const scene = {
     route,
     focused: index === routes.indexOf(route),
     index: routes.indexOf(route)
   };

   return (
     <View style={{backgroundColor:'blue',position:'relative',flex:1}}>
     <Animated.View style={[ styles.page, viewStyle,{top:this.state.screentop} ]} {...(viewPanHandlers ? PanResponder.create(viewPanHandlers).panHandlers : null)}>
       {renderScene(scene)}
     </Animated.View>
     </View>
   );
 }
}